PROG -> PROLOG FUNCDEFS
PROLOG -> const ifj = @import ( "ifj24.zig" ) ;
FUNCDEFS -> FUNCDEF FUNCDEFS
FUNCDEFS -> eps
FUNCDEF -> pub fn id ( PARAM ) RTYPE { STLIST }
PARAM -> id : TYPE NEXTPARAM
PARAM -> eps
NEXTPARAM -> , PARAM
NEXTPARAM -> eps
TYPE -> NULLABLE SIZE
SIZE -> i32
SIZE -> f64
SIZE -> [ ] u8
NULLABLE -> ?
NULLABLE -> eps
RTYPE -> TYPE
RTYPE -> void
STLIST -> STATEMENT ; STLIST
STLIST -> eps
STATEMENT -> VARDECL
STATEMENT -> IDST
STATEMENT -> IFCOND
STATEMENT -> WHILELOOP
STATEMENT -> RETURNST
VARDECL -> VARTYPE id TYPING ASSIGN
TYPING -> : TYPE
TYPING -> eps
VARTYPE -> const
VARTYPE -> var
IDST -> BUILTIN id IDSTTYPE
IDSTTYPE -> ASSIGN
IDSTTYPE -> FUNCCALL
ASSIGN -> = VALUE
VALUE -> BUILTIN id FUNCCALL
VALUE -> expr
BUILTIN -> ifj .
BUILTIN -> eps
FUNCCALL -> ( CALLPARAM )
CALLPARAM -> TERM NEXTCALLPARAM
CALLPARAM -> eps
NEXTCALLPARAM -> , CALLPARAM
NEXTCALLPARAM -> eps
TERM -> intliteral
TERM -> floatliteral
TERM -> strliteral
TERM -> null
TERM -> id
IFCOND -> if ( expr ) NONNULL_RESULT { STLIST } else { STLIST }
WHILELOOP -> while ( expr ) NONNULL_RESULT { STLIST }
NONNULL_RESULT -> | id |
NONNULL_RESULT -> eps
RETURNST -> return RETURNVAL
RETURNVAL -> expr
RETURNVAL -> eps
